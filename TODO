
::::: CURRENT/NEXT ::

- [FEATURE]: SimpleDB
      - https://github.com/rjrodger/simpledb

- [FEATURE]: CouchDB
      - https://github.com/dscape/nano

- [FEATURE]: CouchBase
      - https://github.com/couchbase/couchnode

- [FEATURE]: Riak
      - http://riakjs.com


::::: HIGH ::

- [REFACTOR/HALTED]: Rewrite `Memcache` storage to driver that support SASL (auth) - tried MemJS but it contains serious race-condition bug. =S

- [FEATURE]: Close DB connections properly on system exception/exit:

      // In constructor:

      process.on('exit', function() {
        self.end();
      });

      process.on('uncaughtException', function() {
        self.end();
      });

      // + https://github.com/0ctave/node-sync

- [FEATURE]: Support "expires" for documents (Storage).
      - Memory: Invalidate on fetch
      - FileSystem: Invalidate on fetch
      - Redis: http://redis.io/commands/expire
      - MongoDB: http://docs.mongodb.org/manual/tutorial/expire-data
      - ElasticSearch: http://www.elasticsearch.org/guide/reference/mapping/ttl-field.html
      - Memcache: http://code.google.com/p/memcached/wiki/NewCommands#Standard_Protocol
      - AmazonS3: http://aws.typepad.com/aws/2011/12/amazon-s3-object-expiration.html (i.e. note really => invalidate on fetch)

- [FEATURE]: DynamoDB
      - https://github.com/jed/dynamo

- [FEATURE]: RavenDB
      - ?

- [FEATURE]: Cassandra
      - https://github.com/racker/node-cassandra-client
      - https://github.com/simplereach/helenus

- [FEATURE]: HBase
      - https://github.com/wdavidw/node-hbase

- [FEATURE]: SQLite3
      - https://github.com/developmentseed/node-sqlite3

- [FEATURE]: PostgreSQL (HStore)
      - https://github.com/brianc/node-postgres
      - https://github.com/nonuby/node-postgres-hstore

- [FEATURE]: MySQL
      - https://github.com/felixge/node-mysql

- [FEATURE]: In-process stores
      - https://github.com/creationix/nstore
      - https://github.com/felixge/node-dirty
      - https://github.com/pgte/alfred


::::: LOW ::

- [FEATURE]: `Serializer` adapters support (for storages where it makes sense)
      - JSON
      - BSON
      - MessagePack
      - ProtocolBuffers

- [FEATURE]: Count records by type: `Storage#count(<TYPE>)`
      - Memory: `Object.keys`
      - FileSystem: http://nodejs.org/docs/v0.3.1/api/fs.html#fs.readdir
      - Memcache: https://gist.github.com/1365005 (HACK)
      - Redis: http://redis.io/commands/keys
      - MongoDB: http://docs.mongodb.org/manual/reference/method/db.collection.count
      - ElasticSearch: http://www.elasticsearch.org/guide/reference/api/count.html
      - AmazonS3: http://docs.amazonwebservices.com/AmazonS3/2006-03-01/API/RESTBucketGET.html (HACK - bad one)

- [FEATURE]: Clear records by type: `Storage#clear(<TYPE>)`
      - Memory: `Object.keys`
      - FileSystem: http://nodejs.org/docs/v0.3.1/api/fs.html#fs.readdir
      - Memcache: https://gist.github.com/1365005 (HACK)
      - Redis: http://redis.io/commands/keys
      - MongoDB: http://docs.mongodb.org/manual/reference/method/db.collection.remove
      - ElasticSearch: http://www.elasticsearch.org/guide/reference/api/delete-by-query.html
      - AmazonS3:
            http://docs.aws.amazon.com/AmazonS3/latest/API/multiobjectdeleteapi.html
            http://docs.amazonwebservices.com/AmazonS3/2006-03-01/API/RESTBucketGET.html (HACK - bad one)

- [FEATURE]: Migrate from one DB to another via storage instances: `Storage#export(storage)` + `Storage#import(storage)`

- [FEATURE]: Support "versioning" for documents (Storage).

- [FEATURE]: Support multiple endpoints - where applicable - for all storage adapters/clients.

- [FEATURE]: Detect and handle lost connections in a reliable and automatic way.

- [FEATURE]: Connection pool for storage connections
      - https://github.com/coopernurse/node-pool

- [REFACTOR]: Rewrite `ElasticSearch` storage using vanilla HTTP agent.

- [DOC]: Proper function documentation (JSDoc-style).
      - http://en.wikipedia.org/wiki/JSDoc
      - https://developers.google.com/closure/compiler/docs/js-for-compiler

- [REVIEW]: http://howtonode.org/understanding-process-next-tick


::::: MAYBE ::

- [FEATURE]: HyperDex
      - https://github.com/rescrv/HyperDex/tree/master/hyperclient/nodejs

- [FEATURE]: BerkelyDB
      - https://github.com/mcavage/node-bdb
            - OS X: './build/default/*' => './build/Release/*'

- [FEATURE]: REST (storage adapter)
      - https://github.com/danwrong/restler

- [REVIEW]: Get/Set/Del nested attribute values in some convenient way.

- [REVIEW]: Support advanced URL convention (multiple hosts, options, etc.)
      - http://docs.mongodb.org/manual/reference/connection-string
